curr_inCRRT_df <- curr_df[which(ymd_hms(curr_df$ENTERED) >= ymd_hms(CRRT_start) & ymd_hms(curr_df$ENTERED) <= ymd_hms(CRRT_end)),]
#curr solution type  for title
curr_solution_type <- solutionType_data[which(solutionType_data[,"ENCNTR_ID"] == curr_id), "ITS.intervention.pris_0.Phox_1"]
if (curr_solution_type == 0){
curr_solution_full_name <- "Prismasate"
}else if(curr_solution_type == 1){
curr_solution_full_name <- "Phoxilium"
}
#get first value in CRRT
sorted_curr_inCRRT_df <- curr_inCRRT_df[order(curr_inCRRT_df$ENTERED),]
bl_value <- sorted_curr_inCRRT_df[1,val_col_name]
changes_inCRRT_values <- sorted_curr_inCRRT_df[,val_col_name] - bl_value
sorted_curr_inCRRT_df$VAL_Minus_1st <- changes_inCRRT_values
return(sorted_curr_inCRRT_df)
}
analysis_ID <- Prismasate_IDs
inCRRT_changes_df_list0 <- list()
for (p in 1:length(analysis_ID)){
curr_id <- analysis_ID[p]
inCRRT_changes_df_list0[[p]] <-get_Changes_func(curr_id,time_col_name, val_col_name)
}
inCRRT_changes_df0 <- do.call(rbind,inCRRT_changes_df_list0)
View(inCRRT_changes_df0)
#####Type 1
analysis_ID <- Phoxilium_IDs
inCRRT_changes_df_list1 <- list()
for (p in 1:length(analysis_ID)){
curr_id <- analysis_ID[p]
inCRRT_changes_df_list1[[p]] <-get_time_window_perday_data_func(curr_id,time_col_name, val_col_name)
}
analysis_ID <- Phoxilium_IDs
inCRRT_changes_df_list1 <- list()
for (p in 1:length(analysis_ID)){
curr_id <- analysis_ID[p]
inCRRT_changes_df_list1[[p]] <-get_Changes_func(curr_id,time_col_name, val_col_name)
}
inCRRT_changes_df1 <- do.call(rbind,inCRRT_changes_df_list1)
View(inCRRT_changes_df0)
#Get avg changes per dat
crrt_duration <- as.numeric(difftime(ymd_hms(CRRT_end),ymd_hms(CRRT_start) , units = "day"))
if (crrt_duration < 1){ #if less than one day
CRRT_end <- ymd_hms(CRRT_start) + days(1)
}
curr_id <- "33933865254"
time_col_name <- "ENTERED"
val_col_name <- "VAL_NUM"
curr_id <- "33933865254"
time_col_name <- "ENTERED"
val_col_name <- "VAL_NUM"
#value data
curr_df <- pho_data[which(pho_data[,"ENCNTR_ID"] == curr_id), ]
#time data
CRRT_time_info <- solutionType_data[which(solutionType_data[,"ENCNTR_ID"] == curr_id),]
CRRT_start <- as.character(CRRT_time_info[,"CRRT_START_DTM"])
CRRT_end <- as.character(CRRT_time_info[,"CRRT_STOP_DTM"])
time_type <- "CRRT"
time_df <- cbind.data.frame(time_type,CRRT_start,CRRT_end)
colnames(time_df) <- c("Type","Start","End")
#in CRRT data
if (nchar(CRRT_start)==10){
CRRT_start <- paste(CRRT_start, "00:00:00")
}
if (nchar(CRRT_end)==10){
CRRT_end <- paste(CRRT_end, "00:00:00")
}
curr_inCRRT_df <- curr_df[which(ymd_hms(curr_df$ENTERED) >= ymd_hms(CRRT_start) & ymd_hms(curr_df$ENTERED) <= ymd_hms(CRRT_end)),]
#curr solution type  for title
curr_solution_type <- solutionType_data[which(solutionType_data[,"ENCNTR_ID"] == curr_id), "ITS.intervention.pris_0.Phox_1"]
if (curr_solution_type == 0){
curr_solution_full_name <- "Prismasate"
}else if(curr_solution_type == 1){
curr_solution_full_name <- "Phoxilium"
}
#get first value in CRRT
sorted_curr_inCRRT_df <- curr_inCRRT_df[order(curr_inCRRT_df$ENTERED),]
bl_value <- sorted_curr_inCRRT_df[1,val_col_name]
changes_inCRRT_values <- sorted_curr_inCRRT_df[,val_col_name] - bl_value
sorted_curr_inCRRT_df$VAL_Minus_1st <- changes_inCRRT_values
#Get avg changes per dat
crrt_duration <- as.numeric(difftime(ymd_hms(CRRT_end),ymd_hms(CRRT_start) , units = "day"))
if (crrt_duration < 1){ #if less than one day
CRRT_end <- ymd_hms(CRRT_start) + days(1)
}
#Compute per day avg,min, max
time_seq <- seq(ymd_hms(CRRT_start), ymd_hms(CRRT_end), by = "day")
time_seq_label <- paste0("day",seq(1,length(time_seq)-1))
perDay_df <- data.frame(matrix(NA, nrow = length(time_seq_label),ncol = 7))
colnames(perDay_df) <- c("ENCNTR_ID","Day","Avg","Median","Min","Max","SolutionType")
perDay_df$ENCNTR_ID <- curr_id
perDay_df$Day <- time_seq_label
perDay_df$SolutionType <- curr_solution_full_name
curr_inCRRT_df
curr_inCRRT_df$SPECIMEN_TYPE
curr_start <- time_seq[t]
curr_end <- time_seq[t + 1]
curr_day_df <- sorted_curr_inCRRT_df[which(ymd_hms(sorted_curr_inCRRT_df$ENTERED) >= curr_start & ymd_hms(sorted_curr_inCRRT_df$ENTERED) < curr_end),]
curr_day_df
sorted_curr_inCRRT_df
curr_inCRRT_df
#get first value in CRRT
sorted_curr_inCRRT_df <- curr_inCRRT_df[order(curr_inCRRT_df$ENTERED),]
bl_value <- sorted_curr_inCRRT_df[1,val_col_name]
changes_inCRRT_values <- sorted_curr_inCRRT_df[,val_col_name] - bl_value
sorted_curr_inCRRT_df$VAL_Minus_1st <- changes_inCRRT_values
#Get avg changes per dat
crrt_duration <- as.numeric(difftime(ymd_hms(CRRT_end),ymd_hms(CRRT_start) , units = "day"))
if (crrt_duration < 1){ #if less than one day
CRRT_end <- ymd_hms(CRRT_start) + days(1)
}
#Compute per day avg,min, max
time_seq <- seq(ymd_hms(CRRT_start), ymd_hms(CRRT_end), by = "day")
time_seq_label <- paste0("day",seq(1,length(time_seq)-1))
perDay_df <- data.frame(matrix(NA, nrow = length(time_seq_label),ncol = 7))
colnames(perDay_df) <- c("ENCNTR_ID","Day","Avg","Median","Min","Max","SolutionType")
perDay_df$ENCNTR_ID <- curr_id
perDay_df$Day <- time_seq_label
perDay_df$SolutionType <- curr_solution_full_name
sorted_curr_inCRRT_df$ENTERED
curr_start <- time_seq[t]
curr_end <- time_seq[t + 1]
curr_day_df <- sorted_curr_inCRRT_df[which(ymd_hms(sorted_curr_inCRRT_df$ENTERED) >= curr_start & ymd_hms(sorted_curr_inCRRT_df$ENTERED) < curr_end),]
curr_day_df
for (t in 1:(length(time_seq)-1)){
curr_start <- time_seq[t]
curr_end <- time_seq[t + 1]
curr_day_df <- sorted_curr_inCRRT_df[which(ymd_hms(sorted_curr_inCRRT_df$ENTERED) >= curr_start & ymd_hms(sorted_curr_inCRRT_df$ENTERED) < curr_end),]
if (nrow(curr_day_df) != 0){ #if there are aval data in current day
curr_avg_changes <- mean(curr_day_df[,"VAL_Minus_1st"],na.rm = T)
perDay_df[t,"Avg"] <- curr_avg_changes
}
}
perDay_df
View(sorted_curr_inCRRT_df)
#Compute per day avg,min, max
time_seq <- seq(ymd_hms(CRRT_start), ymd_hms(CRRT_end), by = "day")
time_seq_label <- paste0("day",seq(1,length(time_seq)-1))
perDay_df <- data.frame(matrix(NA, nrow = length(time_seq_label),ncol = 7))
colnames(perDay_df) <- c("ENCNTR_ID","Day","Avg_changes","SolutionType")
perDay_df$ENCNTR_ID <- curr_id
perDay_df$Day <- time_seq_label
perDay_df$SolutionType <- curr_solution_full_name
for (t in 1:(length(time_seq)-1)){
curr_start <- time_seq[t]
curr_end <- time_seq[t + 1]
curr_day_df <- sorted_curr_inCRRT_df[which(ymd_hms(sorted_curr_inCRRT_df$ENTERED) >= curr_start & ymd_hms(sorted_curr_inCRRT_df$ENTERED) < curr_end),]
if (nrow(curr_day_df) != 0){ #if there are aval data in current day
curr_avg_changes <- mean(curr_day_df[,"VAL_Minus_1st"],na.rm = T)
perDay_df[t,"Avg_changes"] <- curr_avg_changes
}
}
perDay_df
#Compute per day avg,min, max
time_seq <- seq(ymd_hms(CRRT_start), ymd_hms(CRRT_end), by = "day")
time_seq_label <- paste0("day",seq(1,length(time_seq)-1))
perDay_df <- data.frame(matrix(NA, nrow = length(time_seq_label),ncol = 4))
colnames(perDay_df) <- c("ENCNTR_ID","Day","Avg_changes","SolutionType")
perDay_df$ENCNTR_ID <- curr_id
perDay_df$Day <- time_seq_label
perDay_df$SolutionType <- curr_solution_full_name
for (t in 1:(length(time_seq)-1)){
curr_start <- time_seq[t]
curr_end <- time_seq[t + 1]
curr_day_df <- sorted_curr_inCRRT_df[which(ymd_hms(sorted_curr_inCRRT_df$ENTERED) >= curr_start & ymd_hms(sorted_curr_inCRRT_df$ENTERED) < curr_end),]
if (nrow(curr_day_df) != 0){ #if there are aval data in current day
curr_avg_changes <- mean(curr_day_df[,"VAL_Minus_1st"],na.rm = T)
perDay_df[t,"Avg_changes"] <- curr_avg_changes
}
}
perDay_df
#5.
get_Changes_func <- function(curr_id,time_col_name, val_col_name){
curr_id <- "33933865254"
time_col_name <- "ENTERED"
val_col_name <- "VAL_NUM"
#value data
curr_df <- pho_data[which(pho_data[,"ENCNTR_ID"] == curr_id), ]
#time data
CRRT_time_info <- solutionType_data[which(solutionType_data[,"ENCNTR_ID"] == curr_id),]
CRRT_start <- as.character(CRRT_time_info[,"CRRT_START_DTM"])
CRRT_end <- as.character(CRRT_time_info[,"CRRT_STOP_DTM"])
time_type <- "CRRT"
time_df <- cbind.data.frame(time_type,CRRT_start,CRRT_end)
colnames(time_df) <- c("Type","Start","End")
#in CRRT data
if (nchar(CRRT_start)==10){
CRRT_start <- paste(CRRT_start, "00:00:00")
}
if (nchar(CRRT_end)==10){
CRRT_end <- paste(CRRT_end, "00:00:00")
}
curr_inCRRT_df <- curr_df[which(ymd_hms(curr_df$ENTERED) >= ymd_hms(CRRT_start) & ymd_hms(curr_df$ENTERED) <= ymd_hms(CRRT_end)),]
#curr solution type  for title
curr_solution_type <- solutionType_data[which(solutionType_data[,"ENCNTR_ID"] == curr_id), "ITS.intervention.pris_0.Phox_1"]
if (curr_solution_type == 0){
curr_solution_full_name <- "Prismasate"
}else if(curr_solution_type == 1){
curr_solution_full_name <- "Phoxilium"
}
#get first value in CRRT
sorted_curr_inCRRT_df <- curr_inCRRT_df[order(curr_inCRRT_df$ENTERED),]
bl_value <- sorted_curr_inCRRT_df[1,val_col_name]
changes_inCRRT_values <- sorted_curr_inCRRT_df[,val_col_name] - bl_value
sorted_curr_inCRRT_df$VAL_Minus_1st <- changes_inCRRT_values
#Get avg changes per dat
crrt_duration <- as.numeric(difftime(ymd_hms(CRRT_end),ymd_hms(CRRT_start) , units = "day"))
if (crrt_duration < 1){ #if less than one day
CRRT_end <- ymd_hms(CRRT_start) + days(1)
}
#Compute per day avg,min, max
time_seq <- seq(ymd_hms(CRRT_start), ymd_hms(CRRT_end), by = "day")
time_seq_label <- paste0("day",seq(1,length(time_seq)-1))
perDay_df <- data.frame(matrix(NA, nrow = length(time_seq_label),ncol = 4))
colnames(perDay_df) <- c("ENCNTR_ID","Day","Avg_changes","SolutionType")
perDay_df$ENCNTR_ID <- curr_id
perDay_df$Day <- time_seq_label
perDay_df$SolutionType <- curr_solution_full_name
for (t in 1:(length(time_seq)-1)){
curr_start <- time_seq[t]
curr_end <- time_seq[t + 1]
curr_day_df <- sorted_curr_inCRRT_df[which(ymd_hms(sorted_curr_inCRRT_df$ENTERED) >= curr_start & ymd_hms(sorted_curr_inCRRT_df$ENTERED) < curr_end),]
if (nrow(curr_day_df) != 0){ #if there are aval data in current day
curr_avg_changes <- mean(curr_day_df[,"VAL_Minus_1st"],na.rm = T)
perDay_df[t,"Avg_changes"] <- curr_avg_changes
}
}
return(list(sorted_curr_inCRRT_df,perDay_df))
}
#5.
get_Changes_func <- function(curr_id,time_col_name, val_col_name){
# curr_id <- "33933865254"
# time_col_name <- "ENTERED"
# val_col_name <- "VAL_NUM"
#value data
curr_df <- pho_data[which(pho_data[,"ENCNTR_ID"] == curr_id), ]
#time data
CRRT_time_info <- solutionType_data[which(solutionType_data[,"ENCNTR_ID"] == curr_id),]
CRRT_start <- as.character(CRRT_time_info[,"CRRT_START_DTM"])
CRRT_end <- as.character(CRRT_time_info[,"CRRT_STOP_DTM"])
time_type <- "CRRT"
time_df <- cbind.data.frame(time_type,CRRT_start,CRRT_end)
colnames(time_df) <- c("Type","Start","End")
#in CRRT data
if (nchar(CRRT_start)==10){
CRRT_start <- paste(CRRT_start, "00:00:00")
}
if (nchar(CRRT_end)==10){
CRRT_end <- paste(CRRT_end, "00:00:00")
}
curr_inCRRT_df <- curr_df[which(ymd_hms(curr_df$ENTERED) >= ymd_hms(CRRT_start) & ymd_hms(curr_df$ENTERED) <= ymd_hms(CRRT_end)),]
#curr solution type  for title
curr_solution_type <- solutionType_data[which(solutionType_data[,"ENCNTR_ID"] == curr_id), "ITS.intervention.pris_0.Phox_1"]
if (curr_solution_type == 0){
curr_solution_full_name <- "Prismasate"
}else if(curr_solution_type == 1){
curr_solution_full_name <- "Phoxilium"
}
#get first value in CRRT
sorted_curr_inCRRT_df <- curr_inCRRT_df[order(curr_inCRRT_df$ENTERED),]
bl_value <- sorted_curr_inCRRT_df[1,val_col_name]
changes_inCRRT_values <- sorted_curr_inCRRT_df[,val_col_name] - bl_value
sorted_curr_inCRRT_df$VAL_Minus_1st <- changes_inCRRT_values
#Get avg changes per dat
crrt_duration <- as.numeric(difftime(ymd_hms(CRRT_end),ymd_hms(CRRT_start) , units = "day"))
if (crrt_duration < 1){ #if less than one day
CRRT_end <- ymd_hms(CRRT_start) + days(1)
}
#Compute per day avg,min, max
time_seq <- seq(ymd_hms(CRRT_start), ymd_hms(CRRT_end), by = "day")
time_seq_label <- paste0("day",seq(1,length(time_seq)-1))
perDay_df <- data.frame(matrix(NA, nrow = length(time_seq_label),ncol = 4))
colnames(perDay_df) <- c("ENCNTR_ID","Day","Avg_changes","SolutionType")
perDay_df$ENCNTR_ID <- curr_id
perDay_df$Day <- time_seq_label
perDay_df$SolutionType <- curr_solution_full_name
for (t in 1:(length(time_seq)-1)){
curr_start <- time_seq[t]
curr_end <- time_seq[t + 1]
curr_day_df <- sorted_curr_inCRRT_df[which(ymd_hms(sorted_curr_inCRRT_df$ENTERED) >= curr_start & ymd_hms(sorted_curr_inCRRT_df$ENTERED) < curr_end),]
if (nrow(curr_day_df) != 0){ #if there are aval data in current day
curr_avg_changes <- mean(curr_day_df[,"VAL_Minus_1st"],na.rm = T)
perDay_df[t,"Avg_changes"] <- curr_avg_changes
}
}
return(list(sorted_curr_inCRRT_df,perDay_df))
}
analysis_ID <- Phoxilium_IDs
inCRRT_changes_df_list1 <- list()
for (p in 1:length(analysis_ID)){
curr_id <- analysis_ID[p]
res <-get_Changes_func(curr_id,time_col_name, val_col_name)
inCRRT_changes_df_list1[[p]] <- res[[1]]
inCRRT_changes_perday_df_list1[[p]] <- res[[2]]
}
#####Type 1
analysis_ID <- Phoxilium_IDs
inCRRT_changes_df_list1 <- list()
inCRRT_changes_perday_df_list1 <- list()
for (p in 1:length(analysis_ID)){
curr_id <- analysis_ID[p]
res <-get_Changes_func(curr_id,time_col_name, val_col_name)
inCRRT_changes_df_list1[[p]] <- res[[1]]
inCRRT_changes_perday_df_list1[[p]] <- res[[2]]
}
analysis_ID <- Phoxilium_IDs
inCRRT_changes_df_list1 <- list()
inCRRT_changes_perday_df_list1 <- list()
for (p in 1:length(analysis_ID)){
curr_id <- analysis_ID[p]
res <-get_Changes_func(curr_id,time_col_name, val_col_name)
inCRRT_changes_df_list1[[p]] <- res[[1]]
inCRRT_changes_perday_df_list1[[p]] <- res[[2]]
}
#####Type 0
analysis_ID <- Prismasate_IDs
inCRRT_changes_df_list0 <- list()
inCRRT_changes_perday_df_list0 <- list()
for (p in 1:length(analysis_ID)){
curr_id <- analysis_ID[p]
res <-get_Changes_func(curr_id,time_col_name, val_col_name)
inCRRT_changes_df_list0[[p]] <- res[[1]]
inCRRT_changes_perday_df_list0[[p]] <- res[[2]]
}
inCRRT_changes_df0 <- do.call(rbind,inCRRT_changes_df_list0)
inCRRT_changesPerDay_df0 <- do.call(rbind,inCRRT_changes_perday_df_list0)
View(inCRRT_changesPerDay_df0)
#get the first 7 days
inCRRT_changesPerDay_all0_7days <- inCRRT_changesPerDay_df0[which(inCRRT_changesPerDay_df0[,"Day"] %in% c("day1","day2","day3","day4","day5","day6","day7")),]
inCRRT_changesPerDay_all0_7days$Avg_changes
#get the first 7 days
inCRRT_changesPerDay_all0_7days <- inCRRT_changesPerDay_df0[which(inCRRT_changesPerDay_df0[,"Day"] %in% c("day1","day2","day3","day4","day5","day6","day7")),]
#remove pts has less than 7 days of RRT stay and has any missing value for 7 days
ct <- 1
remove_id_list <- NA
for (p in 1:length(Prismasate_IDs)){
curr_id <- Prismasate_IDs[p]
curr_df <- inCRRT_changesPerDay_all0_7days[which(inCRRT_changesPerDay_all0_7days$ENCNTR_ID == curr_id),]
if (nrow(curr_df) < 7 | (nrow(curr_df) ==7 & length(which(is.na(curr_df$Avg_changes) == F)) !=7)){
remove_id_list[ct] <- curr_id
ct <- ct + 1
}
}
updated_inCRRT_changesPerDay_all0_7days <- inCRRT_changesPerDay_all0_7days[-which(inCRRT_changesPerDay_all0_7days$ENCNTR_ID %in% remove_id_list),]
View(updated_inCRRT_changesPerDay_all0_7days)
View(updated_inCRRT_perday_all0_7days)
#get the first 7 days
inCRRT_changesPerDay_all1_7days <- inCRRT_changesPerDay_df1[which(inCRRT_changesPerDay_df1[,"Day"] %in% c("day1","day2","day3","day4","day5","day6","day7")),]
inCRRT_changesPerDay_df1 <- do.call(rbind,inCRRT_changes_perday_df_list1)
#get the first 7 days
inCRRT_changesPerDay_all1_7days <- inCRRT_changesPerDay_df1[which(inCRRT_changesPerDay_df1[,"Day"] %in% c("day1","day2","day3","day4","day5","day6","day7")),]
#remove pts has less than 7 days of RRT stay and has any missing value for 7 days
ct <- 1
remove_id_list <- NA
for (p in 1:length(Phoxilium_IDs)){
curr_id <- Phoxilium_IDs[p]
curr_df <- inCRRT_changesPerDay_all1_7days[which(inCRRT_changesPerDay_all1_7days$ENCNTR_ID == curr_id),]
if (nrow(curr_df) < 7 | (nrow(curr_df) ==7 & length(which(is.na(curr_df$Avg_changes) == F)) !=7)){
remove_id_list[ct] <- curr_id
ct <- ct + 1
}
}
updated_inCRRT_changesPerDay_all1_7days <- inCRRT_changesPerDay_all1_7days[-which(inCRRT_changesPerDay_all1_7days$ENCNTR_ID %in% remove_id_list),]
updated_inCRRT_changesPerDay_all1_7days$Avg_changes
#plot avg changes
unit_of_measurement <- "mg/dL"
time_col_name <- "Day"
val_col_name <- "Avg_changes"
max_global <- 10
min_global <- -10
png("/Users/lucasliu/Desktop/Prismasate/Avg_changes_Prismasate.png")
patients_plot <- grp_dynmaic_plot_func(updated_inCRRT_changesPerDay_all0_7days, time_col_name,val_col_name,unit_of_measurement,min_global,max_global)
print(patients_plot)
dev.off()
png("/Users/lucasliu/Desktop/Phoxilium/Avg_changes_Phoxilium.png")
patients_plot <- grp_dynmaic_plot_func(updated_inCRRT_changesPerDay_all1_7days, time_col_name,val_col_name,unit_of_measurement,min_global,max_global)
print(patients_plot)
dev.off()
updated_inCRRT_changesPerDay_all1_7days$Avg_changes
inCRRT_changes_df0
mean(abs(inCRRT_changes_df0$VAL_Minus_1st),na.rm = T)
mean(abs(inCRRT_changes_df1$VAL_Minus_1st),na.rm = T)
updated_inCRRT_changesPerDay_all1_7days$Avg_changes
mean(abs(updated_inCRRT_changesPerDay_all0_7days$Avg_changes),na.rm = T) #Prismasate
mean(abs(updated_inCRRT_changesPerDay_all1_7days$Avg_changes),na.rm = T) #Phoxilium
mean(abs(inCRRT_changes_df0$VAL_Minus_1st),na.rm = T) #Prismasate
mean(abs(updated_inCRRT_changesPerDay_all0_7days$Avg_changes),na.rm = T) #Prismasate
mean(abs(updated_inCRRT_changesPerDay_all0_7days$Avg_changes),na.rm = T) #Prismasate
mean(abs(updated_inCRRT_changesPerDay_all1_7days$Avg_changes),na.rm = T) #Phoxilium
setwd("~/Desktop/DrChen_Projects/ROD_Project/ROD_Organized_Code")
library(openxlsx)
source("Ultility.R")
source("Ultils_LoadData_Funcs.R")
library(reshape2)
library(ggplot2)
library(xgboost)
###Input and output directory
in_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0103_21/"
out_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0112_21/out1/"
out_dir2 <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0112_21/out2/"
#1. staionary feature data
final_df <- read.csv(paste0(in_dir,"data_stationary.csv"), stringsAsFactors = F)
rownames(final_df) <- final_df$X
final_df <- final_df[,-1]
#2. Load Diff feature data
final_delta_df <- read.csv(paste0(in_dir,"data_Diff_POSandNeg.csv"), stringsAsFactors = F)
rownames(final_delta_df) <- final_delta_df$X
final_delta_df <- final_delta_df[,-1]
reorder_tomatch_df <- final_delta_df[match(rownames(final_delta_df), rownames(final_df)),]
comb_df <- cbind(final_df, reorder_tomatch_df)
#3remove outcome related features SqRtVOLUMEA,CASCOREA(BL,yr1,yr2,Diff0_2,Diff1_2,Diff0_1)
#remove orignal label columns
original_stalabel_names <- c("CASCOREA_bl" , "CASCORE1A_yr1", "CASCORE2A_yr2",
"SqRtVOLUMEA_bl", "SqRtVOLUME1A_yr1", "SqRtVOLUME2A_yr2")
original_trendlabel_names <- c("CASCOREA_Diff0_1" , "CASCOREA_Diff1_2", "CASCOREA_Diff0_2",
"SqRtVOLUMEA_Diff0_1", "SqRtVOLUMEA_Diff1_2", "SqRtVOLUMEA_Diff0_2")
pos_neg_trendlabel_names <- c("CASCOREA_Diff0_1_pos" , "CASCOREA_Diff0_1_neg",
"CASCOREA_Diff1_2_pos","CASCOREA_Diff1_2_neg",
"CASCOREA_Diff0_2_pos",  "CASCOREA_Diff0_2_neg",
"SqRtVOLUMEA_Diff0_1_pos", "SqRtVOLUMEA_Diff0_1_neg",
"SqRtVOLUMEA_Diff1_2_pos","SqRtVOLUMEA_Diff1_2_neg",
"SqRtVOLUMEA_Diff0_2_pos", "SqRtVOLUMEA_Diff0_2_neg")
updated_comb_df <- comb_df[, -which(colnames(comb_df) %in% c(original_stalabel_names,original_trendlabel_names,pos_neg_trendlabel_names))]
updated_delta_df <- final_delta_df[, -which(colnames(final_delta_df) %in% c(original_trendlabel_names,pos_neg_trendlabel_names))]
updated_static_df <- final_df[, -which(colnames(final_df) %in% c(original_stalabel_names))]
#get feaures
Final_bl_features <- colnames(updated_comb_df)[which(grepl("bl",colnames(updated_comb_df))==T)]
Final_yr1_features <- colnames(updated_comb_df)[which(grepl("yr1",colnames(updated_comb_df))==T)]
Final_yr2_features <- colnames(updated_comb_df)[which(grepl("yr2",colnames(updated_comb_df))==T)]
Diff0_1_features <- colnames(updated_comb_df)[which(grepl("Diff0_1",colnames(updated_comb_df))==T)]
Diff1_2_features <- colnames(updated_comb_df)[which(grepl("Diff1_2",colnames(updated_comb_df))==T)]
Diff0_2_features <- colnames(updated_comb_df)[which(grepl("Diff0_2",colnames(updated_comb_df))==T)]
##########################################################################
####I. Load all catogrized labels
###A. Get catogrized label of SqRtVOLUME at bl,yr1 and yr2
#  A1. start Non-high risk : SqRtVOLUME < 19.1 (0)
#  A2. start High Risk:      SqRtVOLUME >= 19.1 (1)
##########################################################################
Label_df <- read.csv(paste0(in_dir,"Outcome_SqRtVOLUME.csv"), stringsAsFactors = F)
rownames(Label_df) <- Label_df$X
Label_df <- Label_df[,-1]
##########################################################################
###Prediction 1: start non high vs high
###
##########################################################################
analysiis_label_df <- Label_df
analysiis_label_df$Starting_SqRtVOLUME_LABEL[which(analysiis_label_df$Starting_SqRtVOLUME_LABEL == "start_nonH")] <- 0
analysiis_label_df$Starting_SqRtVOLUME_LABEL[which(analysiis_label_df$Starting_SqRtVOLUME_LABEL == "start_H")] <- 1
table(analysiis_label_df$Starting_SqRtVOLUME_LABEL) #49 58
data_input <- updated_comb_df
label_col_name <- "Starting_SqRtVOLUME_LABEL"
analysis_IDs <- rownames(analysiis_label_df) #107
#subset Ids has label
Id_idxes <- which(rownames(data_input) %in% analysis_IDs)
data_input <- data_input[Id_idxes,]
#Updated Manually corrected outlier values of CO2
outlier_corrected_df <- read.xlsx("Lucasfile2_CorrectedCO2.xlsx", sheet = 1)
#Updated Manually corrected outlier values of CO2
corrected_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Data/Lucasfile2_CorrectedCO2.xlsx"
outlier_corrected_df <- read.xlsx(corrected_dir, sheet = 1)
View(outlier_corrected_df)
which(data_input[,"CO2_bl"] != outlier_corrected_df[,"CO2_bl"])
which(data_input[,"CO2_bl"] == outlier_corrected_df[,"CO2_bl"])
data_input[,"CO2_bl"]
outlier_corrected_df[,"CO2_bl"]
View(data_input)
match(outlier_corrected_df$X1, rownames(data_input))
rownames(data_input)
outlier_corrected_df[match(outlier_corrected_df$X1, rownames(data_input)),"CO2_bl"]
data_input[,"CO2_bl"]
outlier_corrected_df[match(outlier_corrected_df$X1, rownames(data_input)),]
outlier_corrected_df <- outlier_corrected_df[match(outlier_corrected_df$X1, rownames(data_input)),]
View(outlier_corrected_df)
View(outlier_corrected_df)
outlier_corrected_df <- outlier_corrected_df[match(rownames(data_input),outlier_corrected_df$X1),]
View(outlier_corrected_df)
#Updated Manually corrected outlier values of CO2
corrected_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Data/Lucasfile2_CorrectedCO2.xlsx"
outlier_corrected_df <- read.xlsx(corrected_dir, sheet = 1)
outlier_corrected_df <- outlier_corrected_df[match(rownames(data_input),outlier_corrected_df$X1),]
View(outlier_corrected_df)
which(data_input[,"CO2_bl"] == outlier_corrected_df[,"CO2_bl"])
which(data_input[,"CO2_bl"] != outlier_corrected_df[,"CO2_bl"])
which(data_input[,"CO2_bl"] == outlier_corrected_df[,"CO2_bl"])
length(which(data_input[,"CO2_bl"] == outlier_corrected_df[,"CO2_bl"]))
which(data_input[,"CO2_bl"] == outlier_corrected_df[,"CO2_bl"])
which(data_input[,"CO2_bl"] != outlier_corrected_df[,"CO2_bl"])
which(data_input[,"Dialysate_bl"] != outlier_corrected_df[,"CO2_bl"])
which(data_input[,"Dialysate_bl"] != Dialysate_bl[,"CO2_bl"])
which(data_input[,"Dialysate_bl"] != outlier_corrected_df[,"Dialysate_bl"])
which(data_input[,"Dialysate_bl"] == outlier_corrected_df[,"Dialysate_bl"])
which(!data_input[,"Dialysate_bl"] == outlier_corrected_df[,"Dialysate_bl"])
!which(data_input[,"Dialysate_bl"] == outlier_corrected_df[,"Dialysate_bl"])
which(data_input[,"Dialysate_bl"] == outlier_corrected_df[,"Dialysate_bl"])
outlier_corrected_df[,c("Dialysate_bl","CO2_bl")]
check <- outlier_corrected_df[,c("Dialysate_bl","CO2_bl")]
View(check)
check <- cbind(outlier_corrected_df[,c("Dialysate_bl","CO2_bl","X1")],data_input[,c("Dialysate_bl","CO2_bl")])
View(check)
check <- cbind(outlier_corrected_df[,c("X1","Dialysate_bl","CO2_bl")],data_input[,c("Dialysate_bl","CO2_bl")])
colnames(check)[2:3] <- c("Dialysate_bl_updated","CO2_bl_updated")
which(check[,"Dialysate_bl_updated"] == check[,"Dialysate_bl"])
which(check[,"Dialysate_bl_updated"] != check[,"Dialysate_bl"])
which(check[,"Dialysate_bl_updated"] == check[,"Dialysate_bl"])
length(which(check[,"Dialysate_bl_updated"] == check[,"Dialysate_bl"]))
107-95
which(check[,"Dialysate_bl_updated"] == check[,"Dialysate_bl"]
)
View(check)
data_input$CO2_bl
data_input$CO21_yr1
data_input$CO22_yr1
data_input$CO22_yr2
data_input$CO21_yr1
