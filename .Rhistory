p <- ggplot(voilin_plot_data, aes_string(x=plot_x, y=plot_y)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold")) +
labs(y = plot_y,x = "")
print(p)
dev.off()
}
warnings()
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
norm_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
}
all_norm_pvalues <- do.call(rbind,norm_results)
#not normed distributed features
NOT_normed_fs <- critical_features[which(all_norm_pvalues$p0<0.05 | all_norm_pvalues$p1<0.05)]
normed_fs <- critical_features[which(all_norm_pvalues$p0>0.05 & all_norm_pvalues$p1>0.05)]
grp_diff_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
grp_diff_results[[f]] <- grp_diff_test(data_input,curr_f,outcome_label,NOT_normed_fs,normed_fs)
}
all_grp_dff_pvalues <- do.call(rbind,grp_diff_results)
signif_idxes <- which(all_grp_dff_pvalues$p_f0_less_f1 <=0.05 | all_grp_dff_pvalues$p_f0_greater_f1 <=0.05)
all_grp_dff_pvalues[signif_idxes,]
##########################################################################
#normality test for each group
##########################################################################
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
norm_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
}
all_norm_pvalues <- do.call(rbind,norm_results)
#not normed distributed features
NOT_normed_fs <- critical_features[which(all_norm_pvalues$p0<0.05 | all_norm_pvalues$p1<0.05)]
normed_fs <- critical_features[which(all_norm_pvalues$p0>0.05 & all_norm_pvalues$p1>0.05)]
##########################################################################
###Grp diff test
##########################################################################
grp_diff_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
grp_diff_results[[f]] <- grp_diff_test(data_input,curr_f,outcome_label,NOT_normed_fs,normed_fs)
}
all_grp_dff_pvalues <- do.call(rbind,grp_diff_results)
signif_idxes <- which(all_grp_dff_pvalues$p_f0_less_f1 <=0.05 | all_grp_dff_pvalues$p_f0_greater_f1 <=0.05)
all_grp_dff_pvalues[signif_idxes,]
write.csv(all_grp_dff_pvalues,paste0(plot_outdir,"grp_diff_test.csv"))
normed_fs
##########################################################################
#normality test for each group
##########################################################################
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
norm_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
}
data_input
data_input$New_Trend_Label
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
f
curr_f <- critical_features[f]
curr_f
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
data_input[,"curr_f"]
data_input[,curr_f]
##########################################################################
#normality test for each group
##########################################################################
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
norm_results <- list()
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
data_input[,cur_f]
data_input[,curr_f]
# Shapiro-Wilk normality test for grp 0
f0_idexes <- which(data_input[,group_name] == 0)
group_name
#####################################################
#Prediction task 2 violin plot
#####################################################
data_input <- updated_comb_df
analysiis_label_df <- Label_df
analysiis_label_df$New_Trend_Label <- NA
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "nonH_nonH")] <- 0
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "H_H")] <- 1
table(analysiis_label_df$New_Trend_Label) #34 58
analysiis_label_df <- analysiis_label_df[-which(is.na(analysiis_label_df$New_Trend_Label)==T),]
analysis_IDs <- rownames(analysiis_label_df) #92
#subset Ids has label
Id_idxes <- which(rownames(data_input) %in% analysis_IDs)
data_input <- data_input[Id_idxes,]
#reoder to match and add label to data input
data_input$New_Trend_Label <- analysiis_label_df[match(rownames(analysiis_label_df),rownames(data_input)),"New_Trend_Label"]
# Basic violin plot for critical features
f_dir2 <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0103_21/out2/"
critical_features_df <- read.csv(paste0(f_dir2, "/Exp1_important_fs.csv"),stringsAsFactors = F)
critical_features <- critical_features_df$x
plot_outdir <- paste0(f_dir2,"violin_plot/")
# Basic violin plot for critical features
f_dir2 <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0103_21/out2/"
critical_features_df <- read.csv(paste0(f_dir2, "/Exp1_important_fs.csv"),stringsAsFactors = F)
critical_features <- critical_features_df$x
plot_outdir <- paste0(f_dir2,"violin_plot/")
for (f in 1:length(critical_features)){
plot_x <- "New_Trend_Label"
plot_y <-  critical_features[f]
voilin_plot_data <- data_input[which(is.na(data_input$New_Trend_Label)==F),]
grp0_idex <- which(voilin_plot_data$New_Trend_Label==0)
grp1_idex <- which(voilin_plot_data$New_Trend_Label==1)
voilin_plot_data$New_Trend_Label[grp0_idex] <- "(0) start non-high, \n stay non-high"
voilin_plot_data$New_Trend_Label[grp1_idex] <- "(1) start high, \n stay high"
voilin_plot_data$New_Trend_Label <-as.factor(voilin_plot_data$New_Trend_Label)
png(paste0(plot_outdir,f,plot_y,"VS",plot_x,".png"))
p <- ggplot(voilin_plot_data, aes_string(x=plot_x, y=plot_y)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold")) +
labs(y = plot_y,x = "")
print(p)
dev.off()
}
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
##########################################################################
#normality test for each group
##########################################################################
#normality test function
normality_test_func <- function(data_input,group_name,feature_name){
# Shapiro-Wilk normality test for grp 0
f0_idexes <- which(data_input[,group_name] == 0)
if (length(unique(data_input[f0_idexes,feature_name])) != 1){   #check if all values are identical
res0 <- shapiro.test(data_input[f0_idexes,feature_name])
p0 <- res0$p.value
}else{
p0 <- Inf
}
# Shapiro-Wilk normality test for grp 1
f1_idexes <- which(data_input[,group_name] == 1)
if (length(unique(data_input[f1_idexes,feature_name])) != 1){
res1 <- shapiro.test(data_input[f1_idexes,feature_name])
p1 <- res1$p.value
}else {
p1 <- Inf
}
all_pvalues <- cbind.data.frame(p0,p1)
return(all_pvalues)
}
#####################################################
#Prediction task 2 violin plot
#####################################################
data_input <- updated_comb_df
analysiis_label_df <- Label_df
analysiis_label_df$New_Trend_Label <- NA
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "nonH_nonH")] <- 0
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "H_H")] <- 1
table(analysiis_label_df$New_Trend_Label) #34 58
analysiis_label_df <- analysiis_label_df[-which(is.na(analysiis_label_df$New_Trend_Label)==T),]
analysis_IDs <- rownames(analysiis_label_df) #92
#subset Ids has label
Id_idxes <- which(rownames(data_input) %in% analysis_IDs)
data_input <- data_input[Id_idxes,]
#reoder to match and add label to data input
data_input$New_Trend_Label <- analysiis_label_df[match(rownames(analysiis_label_df),rownames(data_input)),"New_Trend_Label"]
# Basic violin plot for critical features
f_dir2 <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0103_21/out2/"
critical_features_df <- read.csv(paste0(f_dir2, "/Exp1_important_fs.csv"),stringsAsFactors = F)
critical_features <- critical_features_df$x
plot_outdir <- paste0(f_dir2,"violin_plot/")
for (f in 1:length(critical_features)){
plot_x <- "New_Trend_Label"
plot_y <-  critical_features[f]
voilin_plot_data <- data_input[which(is.na(data_input$New_Trend_Label)==F),]
grp0_idex <- which(voilin_plot_data$New_Trend_Label==0)
grp1_idex <- which(voilin_plot_data$New_Trend_Label==1)
voilin_plot_data$New_Trend_Label[grp0_idex] <- "(0) start non-high, \n stay non-high"
voilin_plot_data$New_Trend_Label[grp1_idex] <- "(1) start high, \n stay high"
voilin_plot_data$New_Trend_Label <-as.factor(voilin_plot_data$New_Trend_Label)
png(paste0(plot_outdir,f,plot_y,"VS",plot_x,".png"))
p <- ggplot(voilin_plot_data, aes_string(x=plot_x, y=plot_y)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold")) +
labs(y = plot_y,x = "")
print(p)
dev.off()
}
##########################################################################
#normality test for each group
##########################################################################
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
norm_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
}
all_norm_pvalues <- do.call(rbind,norm_results)
View(all_norm_pvalues)
-Inf < 0.05
Inf > 0.05
Inf < 0.05
##########################################################################
#normality test for each group
##########################################################################
#normality test function
normality_test_func <- function(data_input,group_name,feature_name){
# Shapiro-Wilk normality test for grp 0
f0_idexes <- which(data_input[,group_name] == 0)
if (length(unique(data_input[f0_idexes,feature_name])) != 1){   #check if all values are identical
res0 <- shapiro.test(data_input[f0_idexes,feature_name])
p0 <- res0$p.value
}else{
p0 <- -Inf
}
# Shapiro-Wilk normality test for grp 1
f1_idexes <- which(data_input[,group_name] == 1)
if (length(unique(data_input[f1_idexes,feature_name])) != 1){
res1 <- shapiro.test(data_input[f1_idexes,feature_name])
p1 <- res1$p.value
}else {
p1 <- -Inf
}
all_pvalues <- cbind.data.frame(p0,p1)
return(all_pvalues)
}
##########################################################################
#normality test for each group
##########################################################################
#normality test function
normality_test_func <- function(data_input,group_name,feature_name){
# Shapiro-Wilk normality test for grp 0
f0_idexes <- which(data_input[,group_name] == 0)
if (length(unique(data_input[f0_idexes,feature_name])) != 1){   #check if all values are identical
res0 <- shapiro.test(data_input[f0_idexes,feature_name])
p0 <- res0$p.value
}else{ # if indeitical, then p = -INF < 0.05 -> not norm
p0 <- -Inf
}
# Shapiro-Wilk normality test for grp 1
f1_idexes <- which(data_input[,group_name] == 1)
if (length(unique(data_input[f1_idexes,feature_name])) != 1){
res1 <- shapiro.test(data_input[f1_idexes,feature_name])
p1 <- res1$p.value
}else {
p1 <- -Inf
}
all_pvalues <- cbind.data.frame(p0,p1)
return(all_pvalues)
}
#####################################################
#Prediction task 2 violin plot
#####################################################
data_input <- updated_comb_df
analysiis_label_df <- Label_df
analysiis_label_df$New_Trend_Label <- NA
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "nonH_nonH")] <- 0
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "H_H")] <- 1
table(analysiis_label_df$New_Trend_Label) #34 58
analysiis_label_df <- analysiis_label_df[-which(is.na(analysiis_label_df$New_Trend_Label)==T),]
analysis_IDs <- rownames(analysiis_label_df) #92
#subset Ids has label
Id_idxes <- which(rownames(data_input) %in% analysis_IDs)
data_input <- data_input[Id_idxes,]
#reoder to match and add label to data input
data_input$New_Trend_Label <- analysiis_label_df[match(rownames(analysiis_label_df),rownames(data_input)),"New_Trend_Label"]
#Note: DIALYSATE2_yr2 does not match the boxplot and stats
#NOTE: 28/51 patients has missing Dialysate2,
#XGBoost algorithm will random assign those pts into a branch of dialysiste
#eg. >3.0, then update the assignment based on the prediction results.
#then the final weight direction is based on the updated assigment by training.
check <- data_input[,c("DIALYSATE2_yr2","New_Trend_Label")]
# Basic violin plot for critical features
f_dir2 <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0103_21/out2/"
critical_features_df <- read.csv(paste0(f_dir2, "/Exp1_important_fs.csv"),stringsAsFactors = F)
critical_features <- critical_features_df$x
plot_outdir <- paste0(f_dir2,"violin_plot/")
for (f in 1:length(critical_features)){
plot_x <- "New_Trend_Label"
plot_y <-  critical_features[f]
voilin_plot_data <- data_input[which(is.na(data_input$New_Trend_Label)==F),]
grp0_idex <- which(voilin_plot_data$New_Trend_Label==0)
grp1_idex <- which(voilin_plot_data$New_Trend_Label==1)
voilin_plot_data$New_Trend_Label[grp0_idex] <- "(0) start non-high, \n stay non-high"
voilin_plot_data$New_Trend_Label[grp1_idex] <- "(1) start high, \n stay high"
voilin_plot_data$New_Trend_Label <-as.factor(voilin_plot_data$New_Trend_Label)
png(paste0(plot_outdir,f,plot_y,"VS",plot_x,".png"))
p <- ggplot(voilin_plot_data, aes_string(x=plot_x, y=plot_y)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold")) +
labs(y = plot_y,x = "")
print(p)
dev.off()
}
##########################################################################
#normality test for each group
##########################################################################
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
norm_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
}
all_norm_pvalues <- do.call(rbind,norm_results)
#not normed distributed features
NOT_normed_fs <- critical_features[which(all_norm_pvalues$p0<0.05 | all_norm_pvalues$p1<0.05)]
normed_fs <- critical_features[which(all_norm_pvalues$p0>0.05 & all_norm_pvalues$p1>0.05)]
NOT_normed_fs
##########################################################################
###Grp diff test
##########################################################################
grp_diff_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
grp_diff_results[[f]] <- grp_diff_test(data_input,curr_f,outcome_label,NOT_normed_fs,normed_fs)
}
all_grp_dff_pvalues <- do.call(rbind,grp_diff_results)
signif_idxes <- which(all_grp_dff_pvalues$p_f0_less_f1 <=0.05 | all_grp_dff_pvalues$p_f0_greater_f1 <=0.05)
all_grp_dff_pvalues[signif_idxes,]
write.csv(all_grp_dff_pvalues,paste0(plot_outdir,"grp_diff_test.csv"))
analysiis_label_df$Changing_Label
table(analysiis_label_df$Changing_Label)
#####################################################
#Prediction task 3 violin plot
#####################################################
data_input <- updated_comb_df
analysiis_label_df <- Label_df
table(analysiis_label_df$New_Trend_Label)
table(analysiis_label_df$Starting_SqRtVOLUME_LABEL)
table(analysiis_label_df$Changing_Label)
analysiis_label_df <- Label_df
analysiis_label_df$New_Trend_Label <- NA
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "nonH_H")] <- 0
analysiis_label_df$New_Trend_Label[which(analysiis_label_df$Changing_Label == "H_H")] <- 1
table(analysiis_label_df$New_Trend_Label) #34 58
table(analysiis_label_df$New_Trend_Label) #15 58
analysiis_label_df <- analysiis_label_df[-which(is.na(analysiis_label_df$New_Trend_Label)==T),]
analysis_IDs <- rownames(analysiis_label_df) #92
length(analysis_IDs)
analysis_IDs <- rownames(analysiis_label_df) #73
#subset Ids has label
Id_idxes <- which(rownames(data_input) %in% analysis_IDs)
data_input <- data_input[Id_idxes,]
#reoder to match and add label to data input
data_input$New_Trend_Label <- analysiis_label_df[match(rownames(analysiis_label_df),rownames(data_input)),"New_Trend_Label"]
# Basic violin plot for critical features
f_dir2 <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0103_21/out3/"
critical_features_df <- read.csv(paste0(f_dir2, "/Exp1_important_fs.csv"),stringsAsFactors = F)
critical_features_df <- read.csv(paste0(f_dir2, "/Exp3_important_fs.csv"),stringsAsFactors = F)
critical_features <- critical_features_df$x
plot_outdir <- paste0(f_dir2,"violin_plot/")
# Basic violin plot for critical features
f_dir3 <- "/Users/lucasliu/Desktop/DrChen_Projects/ROD_Project/Intermediate_Data/0103_21/out3/"
critical_features_df <- read.csv(paste0(f_dir2, "/Exp3_important_fs.csv"),stringsAsFactors = F)
critical_features <- critical_features_df$x
plot_outdir <- paste0(f_dir3,"violin_plot/")
plot_outdir <- paste0(f_dir3,"violin_plot/")
for (f in 1:length(critical_features)){
plot_x <- "New_Trend_Label"
plot_y <-  critical_features[f]
voilin_plot_data <- data_input[which(is.na(data_input$New_Trend_Label)==F),]
grp0_idex <- which(voilin_plot_data$New_Trend_Label==0)
grp1_idex <- which(voilin_plot_data$New_Trend_Label==1)
voilin_plot_data$New_Trend_Label[grp0_idex] <- "(0) start non-high, \n stay non-high"
voilin_plot_data$New_Trend_Label[grp1_idex] <- "(1) start high, \n stay high"
voilin_plot_data$New_Trend_Label <-as.factor(voilin_plot_data$New_Trend_Label)
png(paste0(plot_outdir,f,plot_y,"VS",plot_x,".png"))
p <- ggplot(voilin_plot_data, aes_string(x=plot_x, y=plot_y)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold")) +
labs(y = plot_y,x = "")
print(p)
dev.off()
}
plot_outdir <- paste0(f_dir3,"violin_plot/")
for (f in 1:length(critical_features)){
plot_x <- "New_Trend_Label"
plot_y <-  critical_features[f]
voilin_plot_data <- data_input[which(is.na(data_input$New_Trend_Label)==F),]
grp0_idex <- which(voilin_plot_data$New_Trend_Label==0)
grp1_idex <- which(voilin_plot_data$New_Trend_Label==1)
voilin_plot_data$New_Trend_Label[grp0_idex] <- "(0) start non-high, \n get higher"
voilin_plot_data$New_Trend_Label[grp1_idex] <- "(1) start high, \n stay high"
voilin_plot_data$New_Trend_Label <-as.factor(voilin_plot_data$New_Trend_Label)
png(paste0(plot_outdir,f,plot_y,"VS",plot_x,".png"))
p <- ggplot(voilin_plot_data, aes_string(x=plot_x, y=plot_y)) +
geom_violin() +
geom_boxplot(width=0.1) +
theme(axis.text=element_text(size=20),
axis.title=element_text(size=20,face="bold")) +
labs(y = plot_y,x = "")
print(p)
dev.off()
}
##########################################################################
#normality test for each group
##########################################################################
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
norm_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
}
all_norm_pvalues <- do.call(rbind,norm_results)
#not normed distributed features
NOT_normed_fs <- critical_features[which(all_norm_pvalues$p0<0.05 | all_norm_pvalues$p1<0.05)]
normed_fs <- critical_features[which(all_norm_pvalues$p0>0.05 & all_norm_pvalues$p1>0.05)]
##########################################################################
###Grp diff test
##########################################################################
grp_diff_results <- list()
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
grp_diff_results[[f]] <- grp_diff_test(data_input,curr_f,outcome_label,NOT_normed_fs,normed_fs)
}
all_grp_dff_pvalues <- do.call(rbind,grp_diff_results)
signif_idxes <- which(all_grp_dff_pvalues$p_f0_less_f1 <=0.05 | all_grp_dff_pvalues$p_f0_greater_f1 <=0.05)
all_grp_dff_pvalues[signif_idxes,]
write.csv(all_grp_dff_pvalues,paste0(plot_outdir,"grp_diff_test.csv"))
all_grp_dff_pvalues[signif_idxes,]
all_grp_dff_pvalues
NOT_normed_fs
normed_fs
critical_features
##########################################################################
#normality test for each group
##########################################################################
#if p>0.05,it is norm
#if p<0.05, it is not norm
outcome_label <- "New_Trend_Label"
for (f in 1:length(critical_features)){
curr_f <- critical_features[f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
}
all_norm_pvalues <- do.call(rbind,norm_results)
f
curr_f <- critical_features[f]
curr_f
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
data_input[,curr_f]
norm_results[[f]] <- normality_test_func(data_input,outcome_label,curr_f)
data_input[,curr_f]
data_input[,c("New_Trend_Label",curr_f)]
chck <- data_input[,c("New_Trend_Label",curr_f)]
View(chck)
source('~/Desktop/DrChen_Projects/ROD_Project/ROD_Organized_Code/8_Plot_Trend_SQRTVOL_0103.R', echo=TRUE)
setwd("~/Desktop/DrChen_Projects/ROD_Project/ROD_0103_JL/ROD_Organized_Code")
setwd("~/Desktop/ROD_0103_JL")
###Input and output directory
in_dir <- "~/Data/"
out_dir <- "/~/Intermediate_Data/0103_21/"
source('~/Desktop/ROD_0103_JL/1_Data_Preprossing.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/1_Data_Preprossing.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/1_Data_Preprossing.R', echo=TRUE)
in_dir
source('~/Desktop/ROD_0103_JL/2_Compute_Diffs.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/3_Categorize_Labels_SqrtVol_0103.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/4_Prediction_SqrtVol.R', echo=TRUE)
dir.create(file.path(out_dir), showWarnings = FALSE)
dir.create(file.path(out_dir), showWarnings = True)
dir.create(file.path(out_dir))
source('~/Desktop/ROD_0103_JL/4_Prediction_SqrtVol.R', echo=TRUE)
source("1_Data_Preprossing.R")
source('~/Desktop/ROD_0103_JL/Main.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/Main.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/Main.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/1_Data_Preprossing.R', echo=TRUE)
source('~/Desktop/ROD_0103_JL/2_Compute_Diffs.R', echo=TRUE)
rm()
rm()
rm(list=ls())
source("1_Data_Preprossing.R")
rm(list=ls())
source("1_Data_Preprossing.R")
rm(list=ls())
source("2_Compute_Diffs.R")
rm(list=ls())
source("3_Categorize_Labels_SqrtVol_0103.R")
rm(list=ls())
source("1_Data_Preprossing.R")
rm(list=ls())
source("2_Compute_Diffs.R")
rm(list=ls())
source("3_Categorize_Labels_SqrtVol_0103.R")
rm(list=ls())
source('~/Desktop/ROD_0103_JL/Main.R', echo=TRUE)
warnings()
source('~/Desktop/DrChen_Projects/Bone_Project/FTIR_Code/DrawPtsExample_Figures0421.R', echo=TRUE)
