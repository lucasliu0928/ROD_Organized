#4A.get pts has no baseline value
nobl_idx <- which(is.na(updated_raw_df_outlier_removed[,"SqRtVOLUMEA"])==T)
#4B.get pts has no yr1 nor yr2 value
noyr1and2_idx <- which(is.na(updated_raw_df_outlier_removed[,"SqRtVOLUME1A"])==T & is.na(updated_raw_df_outlier_removed[,"SqRtVOLUME2A"])==T )
#5. remove pts no bl, or no yr1 and yr2
updated_raw_df_outlier_removed <- updated_raw_df_outlier_removed[-c(noyr1and2_idx,nobl_idx),]
##############################################################################################
##                Section 3: Updated/Clean and remove unwanted Features                     ##
##############################################################################################
#3.exclude unwanted features from email or meeting
updated_byyear_fs <- exclude_features_Func(bl_features,yr1_features,yr2_features)
updated_bl_features <- updated_byyear_fs[[1]]
updated_yr1_features <- updated_byyear_fs[[2]]
updated_yr2_features <-  updated_byyear_fs[[3]]
#4. update/recode feature values
raw_data_df_withUpdated_values <- update_features_inData(updated_raw_df_outlier_removed)
#5. add manually computed features : catogrized turnover and (average of TLH3D and TRH3D : TH3D)
raw_data_df_withExtra_features <- add_features_inData(raw_data_df_withUpdated_values)
#6A. update bl_feature,yr1_features,yr2_features
updated_bl_features <- c(updated_bl_features,"turnover","TH3D")
updated_yr1_features <- c(updated_yr1_features,"turnover1","TH3D1")
updated_yr2_features <- c(updated_yr2_features,"turnover2","TH3D2")
#6B remove TLH3D and TRH3D since TH3D is computed from these two
Final_bl_features <- updated_bl_features[-which(updated_bl_features %in% c("TLH3D","TRH3D"))]
Final_yr1_features <-updated_yr1_features[-which(updated_yr1_features %in% c("TLH3D1","TRH3D1"))]
Final_yr2_features <- updated_yr2_features[-which(updated_yr2_features %in% c("TLH3D2","TRH3D2"))]
#7. Match original features and outcome by years and group them into one table
byyear_feature_outcome_table <- match_byyear_featureAndoutcome_func(Final_bl_features,Final_yr1_features,Final_yr2_features, outcomes)
##############################################################################################
##                Section 4:  Final analysis data set
#                            A.Subseting raw data with updated analysis features            ##
##                           B. Rename features
##############################################################################################
#A. analysis data only include byyear feautres and outcomes
analysis_df <- raw_data_df_withExtra_features[,c(Final_bl_features,Final_yr1_features,Final_yr2_features,outcomes)]
rownames(analysis_df) <- raw_data_df_withExtra_features[,"ID"]
#B. Re-name features and outcome by years
colnames(analysis_df) <- change_feature_name_func(colnames(analysis_df),byyear_feature_outcome_table[,"BL"],byyear_feature_outcome_table[,"Yr1"],byyear_feature_outcome_table[,"Yr2"])
byyear_feature_outcome_table[which(is.na(byyear_feature_outcome_table[,"BL"])==F),"BL"] <- paste0(byyear_feature_outcome_table[which(is.na(byyear_feature_outcome_table[,"BL"])==F),"BL"],"_bl")
byyear_feature_outcome_table[which(is.na(byyear_feature_outcome_table[,"Yr1"])==F),"Yr1"] <- paste0(byyear_feature_outcome_table[which(is.na(byyear_feature_outcome_table[,"Yr1"])==F),"Yr1"],"_yr1")
byyear_feature_outcome_table[which(is.na(byyear_feature_outcome_table[,"Yr2"])==F),"Yr2"] <- paste0(byyear_feature_outcome_table[which(is.na(byyear_feature_outcome_table[,"Yr2"])==F),"Yr2"],"_yr2")
which(analysis_df$SqRtVOLUMEA_bl==0)
#patient with SqRtVOLUME == 0
ID1 <- which(updated_raw_df_outlier_removed[,"SqRtVOLUMEA"] == 0)
#patient with SqRtVOLUME == 0
ID1 <- which(updated_raw_df_outlier_removed[,"SqRtVOLUMEA"] == 0)
ID2 <- which(updated_raw_df_outlier_removed[,"SqRtVOLUME1A"] == 0)
ID3 <- which(updated_raw_df_outlier_removed[,"SqRtVOLUME2A"] == 0)
ID1
ID2
ID3
unique(ID1,ID2,ID3)
unique(c(ID1,ID2,ID3))
pts_cascoreLT10_idxes
intersect(unique(c(ID1,ID2,ID3)),pts_cascoreLT10_idxes )
source("Ultils_LoadData_Funcs.R")
source("Ultility.R")
library(openxlsx)
###Input and output directory
in_dir <- "../Data/"
data_filename <-  "CombinedROD_BMD_CAC_Bioch_Echo.csv"
reviewed_dir <- "../Data/"
out_dir <- "../Intermediate_Data/0117_21/"
dir.create(file.path(out_dir))
##############################################################################################
##                Section 1: Load ROD Data and Clean and remove unwanted Features           ##
##############################################################################################
raw_data_df <- read.csv(paste0(in_dir, data_filename), stringsAsFactors = F)
#1. Identify original features required for the study
byyear_res <-   Get_ByYear_Features(raw_data_df)
bl_features <- byyear_res[[1]]
yr1_features <- byyear_res[[2]]
yr2_features <- byyear_res[[3]]
outcomes <- byyear_res[[4]]
##############################################################################################
# Section1B: Load Manully checked negative trend pts (added 01/03/21)
##############################################################################################
reviewd_df <- read.xlsx(paste0(reviewed_dir,"deltacacsquvol.xlsx"))
###Get Update sqrtvolumn and CASCORE values
toupdate_idxes <- which(is.na(reviewd_df[,"Rescore.A"])==F
| is.na(reviewd_df[,"Rescore.1A"])==F
| is.na(reviewd_df[,"Rescore.2A"])==F)
updated_df <-as.data.frame(matrix(NA, nrow = length(toupdate_idxes),ncol = 7))
colnames(updated_df) <-c("ID","updated_CASCORE","updated_sqrtvol","updated_CASCORE1","updated_sqrtvol1","updated_CASCORE2","updated_sqrtvol2")
for (i in 1:length(toupdate_idxes)){
curr_idx <- toupdate_idxes[i]
curr_id <- reviewd_df[curr_idx,"ID"]
update_value <- reviewd_df[curr_idx,"Rescore.A"]
updated_CASCORE <- as.numeric(strsplit(update_value,"\\(")[[1]][1])
updated_sqrtvol <- as.numeric(gsub("\\(|\\)","",strsplit(update_value,"\\(")[[1]][2]))
update_value <- reviewd_df[curr_idx,"Rescore.1A"]
updated_CASCORE1 <- as.numeric(strsplit(update_value,"\\(")[[1]][1])
updated_sqrtvol1 <- as.numeric(gsub("\\(|\\)","",strsplit(update_value,"\\(")[[1]][2]))
update_value <- reviewd_df[curr_idx,"Rescore.2A"]
updated_CASCORE2 <- as.numeric(strsplit(update_value,"\\(")[[1]][1])
updated_sqrtvol2 <- as.numeric(gsub("\\(|\\)","",strsplit(update_value,"\\(")[[1]][2]))
updated_df[i,"ID"] <- curr_id
updated_df[i,"updated_CASCORE"] <- updated_CASCORE
updated_df[i,"updated_sqrtvol"] <- updated_sqrtvol
updated_df[i,"updated_CASCORE1"] <- updated_CASCORE1
updated_df[i,"updated_sqrtvol1"] <- updated_sqrtvol1
updated_df[i,"updated_CASCORE2"] <- updated_CASCORE2
updated_df[i,"updated_sqrtvol2"] <- updated_sqrtvol2
}
###################################################
## update values in updated_df
###################################################
for (i in 1:nrow(updated_df)){
curr_id <- updated_df[i,"ID"]
curr_idx <- which(gsub(" |\\.","",raw_data_df$ID) == gsub(" |\\.","",curr_id))
#print(curr_idx)
if ( length(curr_idx) > 0){
##CASCORE
updated_CASCORE <- updated_df[i,"updated_CASCORE"]
if (is.na(updated_CASCORE) == F) {
raw_data_df[curr_idx,"CASCOREA"] <- updated_CASCORE
}
updated_CASCORE <- updated_df[i,"updated_CASCORE1"]
if (is.na(updated_CASCORE) == F) {
raw_data_df[curr_idx,"CASCORE1A"] <- updated_CASCORE
}
updated_CASCORE <- updated_df[i,"updated_CASCORE2"]
if (is.na(updated_CASCORE) == F) {
raw_data_df[curr_idx,"CASCORE2A"] <- updated_CASCORE
}
##SqRtVOLUMEA_bl SqRtVOLUME1A_yr1 SqRtVOLUME2A_yr2
updated_sqrtvol <- updated_df[i,"updated_sqrtvol"]
if (is.na(updated_sqrtvol) == F) {
raw_data_df[curr_idx,"SqRtVOLUMEA"] <- updated_sqrtvol
}
updated_sqrtvol <- updated_df[i,"updated_sqrtvol1"]
if (is.na(updated_sqrtvol) == F) {
raw_data_df[curr_idx,"SqRtVOLUME1A"] <- updated_sqrtvol
}
updated_sqrtvol <- updated_df[i,"updated_sqrtvol2"]
if (is.na(updated_sqrtvol) == F) {
raw_data_df[curr_idx,"SqRtVOLUME2A"] <- updated_sqrtvol
}
}
}
##############################################################################################
##                Section 2: Excluding outlier patients on some features                    ##
##############################################################################################
#1.exclude outliers from CASCOREA,RFN3Dcortical,PO4BIND1A,SqRtVOLUMEA
#the outlier of sqrtvolumns was not removed for cascore predition model, check this funciton below
updated_raw_df_outlier_removed <- remove_outlier_pts_func(raw_data_df)
#patient with SqRtVOLUME == 0
ID1 <- which(updated_raw_df_outlier_removed[,"SqRtVOLUMEA"] == 0)
ID2 <- which(updated_raw_df_outlier_removed[,"SqRtVOLUME1A"] == 0)
ID3 <- which(updated_raw_df_outlier_removed[,"SqRtVOLUME2A"] == 0)
unique(c(ID1,ID2,ID3))
#patient with SqRtVOLUME == 0
ID1 <- updated_raw_df_outlier_removed$ID[which(updated_raw_df_outlier_removed[,"SqRtVOLUMEA"] == 0)]
ID2 <- updated_raw_df_outlier_removed$ID[which(updated_raw_df_outlier_removed[,"SqRtVOLUME1A"] == 0)]
ID3 <- updated_raw_df_outlier_removed$ID[which(updated_raw_df_outlier_removed[,"SqRtVOLUME2A"] == 0)]
unique(c(ID1,ID2,ID3))
#patient with SqRtVOLUME == 0
ID1 <- which(raw_data_df[,"SqRtVOLUMEA"] == 0)
ID2 <- which(raw_data_df[,"SqRtVOLUME1A"] == 0)
ID3 <- which(raw_data_df[,"SqRtVOLUME2A"] == 0)
unique(c(ID1,ID2,ID3))
raw_data_df["ID","SqRtVOLUMEA","SqRtVOLUME1A","SqRtVOLUME2A"]
raw_data_df[,c("ID","SqRtVOLUMEA","SqRtVOLUME1A","SqRtVOLUME2A")]
check <- raw_data_df[,c("ID","SqRtVOLUMEA","SqRtVOLUME1A","SqRtVOLUME2A")]
View(check)
check <- raw_data_df[c(ID1,ID2,ID3),c("ID","SqRtVOLUMEA","SqRtVOLUME1A","SqRtVOLUME2A")]
View(check)
source("Ultils_LoadData_Funcs.R")
source("Ultility.R")
library(openxlsx)
###Input and output directory
in_dir <- "../Data/"
data_filename <-  "CombinedROD_BMD_CAC_Bioch_Echo.csv"
reviewed_dir <- "../Data/"
out_dir <- "../Intermediate_Data/0117_21/"
dir.create(file.path(out_dir))
##############################################################################################
##                Section 1: Load ROD Data and Clean and remove unwanted Features           ##
##############################################################################################
raw_data_df <- read.csv(paste0(in_dir, data_filename), stringsAsFactors = F)
#1. Identify original features required for the study
byyear_res <-   Get_ByYear_Features(raw_data_df)
bl_features <- byyear_res[[1]]
yr1_features <- byyear_res[[2]]
yr2_features <- byyear_res[[3]]
outcomes <- byyear_res[[4]]
#patient with SqRtVOLUME == 0
ID1 <- which(raw_data_df[,"SqRtVOLUMEA"] == 0)
ID2 <- which(raw_data_df[,"SqRtVOLUME1A"] == 0)
ID3 <- which(raw_data_df[,"SqRtVOLUME2A"] == 0)
check <- raw_data_df[c(ID1,ID2,ID3),c("ID","SqRtVOLUMEA","SqRtVOLUME1A","SqRtVOLUME2A")]
getwd()
write.csv(check,"/Users/lucasliu/Desktop/Patients_SqRtVol0.csv")
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Proposal_Code/new_Ultilities.R")
library(lubridate)
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
########################################################################################
##                          1. Time info
##
########################################################################################
#Load HOSP and ICU time
time_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
time_data <- read.csv(paste0(time_data_dir,"time_info_1stHOSP_Admit.csv"), stringsAsFactors = F)
########################################################################################
##                          2. demographics info
##
########################################################################################
#Get demographics
demo_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
demo_info_df <- read.csv(paste0(demo_data_dir,"demo_info_df.csv"))
########################################################################################
#####3. Load raw Scr data and remove outliers
#####
########################################################################################
data_dir<-"/Volumes/WD_Lucas/Data/AKI_Data/Taylors_Data/raw_csv_files/"
CREA_df_all<- read.csv(paste0(data_dir, "SCR_ALL_VALUES.csv"),stringsAsFactors = F)
###remove NA entries
NA_idxes <- which(is.na(CREA_df_all[,"SCR_VALUE"])==T)
CREA_df_all <- CREA_df_all[-NA_idxes,]
###Excluding upper 97.5p and lower 2.5p
qua_res <- quantile(CREA_df_all[,"SCR_VALUE"],c(0.975,0.025))
p97_5 <- qua_res[1]
p2_5 <- qua_res[2]
outlier_idxes <- which(CREA_df_all[,"SCR_VALUE"] > p97_5 | CREA_df_all[,"SCR_VALUE"] < p2_5)
updated_CREA_df_all <- CREA_df_all[-outlier_idxes,]
##Get anlysis ID
Analysis_Ids <- unique(updated_CREA_df_all$STUDY_PATIENT_ID)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Proposal_Code/new_Ultilities.R")
library(lubridate)
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
########################################################################################
##                          1. Time info
##
########################################################################################
#Load HOSP and ICU time
time_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
time_data <- read.csv(paste0(time_data_dir,"time_info_1stHOSP_Admit.csv"), stringsAsFactors = F)
########################################################################################
##                          2. demographics info
##
########################################################################################
#Get demographics
demo_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
demo_info_df <- read.csv(paste0(demo_data_dir,"demo_info_df.csv"))
########################################################################################
#####3. Load raw Scr data and remove outliers
#####
########################################################################################
data_dir<-"/Volumes/WD_Lucas/Data/AKI_Data/Taylors_Data/raw_csv_files/"
CREA_df_all<- read.csv(paste0(data_dir, "SCR_ALL_VALUES.csv"),stringsAsFactors = F)
###remove NA entries
NA_idxes <- which(is.na(CREA_df_all[,"SCR_VALUE"])==T)
CREA_df_all <- CREA_df_all[-NA_idxes,]
###Excluding upper 97.5p and lower 2.5p
qua_res <- quantile(CREA_df_all[,"SCR_VALUE"],c(0.975,0.025))
p97_5 <- qua_res[1]
p2_5 <- qua_res[2]
outlier_idxes <- which(CREA_df_all[,"SCR_VALUE"] > p97_5 | CREA_df_all[,"SCR_VALUE"] < p2_5)
updated_CREA_df_all <- CREA_df_all[-outlier_idxes,]
##Get anlysis ID
Analysis_Ids <- unique(updated_CREA_df_all$STUDY_PATIENT_ID)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Proposal_Code/new_Ultilities.R")
library(lubridate)
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
########################################################################################
##                          1. Time info
##
########################################################################################
#Load HOSP and ICU time
time_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
time_data <- read.csv(paste0(time_data_dir,"time_info_1stHOSP_Admit.csv"), stringsAsFactors = F)
########################################################################################
##                          2. demographics info
##
########################################################################################
#Get demographics
demo_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
demo_info_df <- read.csv(paste0(demo_data_dir,"demo_info_df.csv"))
########################################################################################
#####3. Load raw Scr data and remove outliers
#####
########################################################################################
data_dir<-"/Volumes/WD_Lucas/Data/AKI_Data/Taylors_Data/raw_csv_files/"
CREA_df_all<- read.csv(paste0(data_dir, "SCR_ALL_VALUES.csv"),stringsAsFactors = F)
###remove NA entries
NA_idxes <- which(is.na(CREA_df_all[,"SCR_VALUE"])==T)
CREA_df_all <- CREA_df_all[-NA_idxes,]
###Excluding upper 97.5p and lower 2.5p
qua_res <- quantile(CREA_df_all[,"SCR_VALUE"],c(0.975,0.025))
p97_5 <- qua_res[1]
p2_5 <- qua_res[2]
outlier_idxes <- which(CREA_df_all[,"SCR_VALUE"] > p97_5 | CREA_df_all[,"SCR_VALUE"] < p2_5)
updated_CREA_df_all <- CREA_df_all[-outlier_idxes,]
##Get anlysis ID
Analysis_Ids <- unique(updated_CREA_df_all$STUDY_PATIENT_ID)
CREA_df_all[1:2,]
min(Scr/k,1)
Scr <- 1.42
min(Scr/k,1)
gender == "FEMALE"
gender <- "FEMALE"
race = "BLACK/AFR AMERI"
min(Scr/k,1)^a
Scr <- 1.42
a<-1
b<-1
if(gender=="FEMALE"){
k<- 0.7
alpha <- -0.329
} else if (gender=="MALE"){
k<- 0.9
alpha <- -0.411
}
#if qualities the following 2, updated a and b
if(race=="BLACK/AFR AMERI"){
b<-1.210
}
if(gender=="FEMALE"){
a<-0.742
}
score <- 141*min(Scr/k,1)^a
score
min(Scr/k,1)
score <- 141*(min(Scr/k,1)^alpha)*(max(Scr/k,1)^(-1.209))*(0.993^age)*a*b
age <- 60
score <- 141*(min(Scr/k,1)^alpha)*(max(Scr/k,1)^(-1.209))*(0.993^age)*a*b
score
Scr <- 1.42
gender <- "FEMALE"
race <- "BLACK/AFR AMERI"
age <- 60
a<-1
b<-1
if(gender=="FEMALE"){
k<- 0.7
alpha <- -0.329
} else if (gender=="MALE"){
k<- 0.9
alpha <- -0.411
}
#if qualities the following 2, updated a and b
if(race=="BLACK/AFR AMERI"){
b<-1.159
}
if(gender=="FEMALE"){
a<-1.018
}
score <- 141*(min(Scr/k,1)^alpha)*(max(Scr/k,1)^(-1.209))*(0.993^age)*a*b
score
Scr <- 1.42
gender <- "MALE"
race <- "BLACK/AFR AMERI"
age <- 60
a<-1
b<-1
if(gender=="FEMALE"){
k<- 0.7
alpha <- -0.329
} else if (gender=="MALE"){
k<- 0.9
alpha <- -0.411
}
#if qualities the following 2, updated a and b
if(race=="BLACK/AFR AMERI"){
b<-1.159
}
if(gender=="FEMALE"){
a<-1.018
}
score <- 141*(min(Scr/k,1)^alpha)*(max(Scr/k,1)^(-1.209))*(0.993^age)*a*b
score
#EPI for EGFR queation
EPI_equation<-function(Scr,age,gender,race){
#GFR = 141 × min(Scr/k 1)^α × max(Scr/k, 1)^-1.209 × 0.993^Age × 1.018 [if female] × 1.159 [if African American]
if(gender=="FEMALE"){
k<- 0.7
alpha <- -0.329
} else if (gender=="MALE"){
k<- 0.9
alpha <- -0.411
}
c<-1
d<-1
#if qualities the following 2, updated c and d
if(race=="BLACK/AFR AMERI"){
d<-1.159
}
if(gender=="FEMALE"){
c<-1.018
}
score <- 141*(min(Scr/k,1)^alpha)*(max(Scr/k,1)^(-1.209))*(0.993^age)*c*d
return(score)
}
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Proposal_Code/new_Ultilities.R")
library(lubridate)
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
########################################################################################
##                          1. Time info
##
########################################################################################
#Load HOSP and ICU time
time_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
time_data <- read.csv(paste0(time_data_dir,"time_info_1stHOSP_Admit.csv"), stringsAsFactors = F)
########################################################################################
##                          2. demographics info
##
########################################################################################
#Get demographics
demo_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
demo_info_df <- read.csv(paste0(demo_data_dir,"demo_info_df.csv"))
########################################################################################
#####3. Load raw Scr data and remove outliers
#####
########################################################################################
data_dir<-"/Volumes/WD_Lucas/Data/AKI_Data/Taylors_Data/raw_csv_files/"
CREA_df_all<- read.csv(paste0(data_dir, "SCR_ALL_VALUES.csv"),stringsAsFactors = F)
###remove NA entries
NA_idxes <- which(is.na(CREA_df_all[,"SCR_VALUE"])==T)
CREA_df_all <- CREA_df_all[-NA_idxes,]
###Excluding upper 97.5p and lower 2.5p
qua_res <- quantile(CREA_df_all[,"SCR_VALUE"],c(0.975,0.025))
p97_5 <- qua_res[1]
p2_5 <- qua_res[2]
outlier_idxes <- which(CREA_df_all[,"SCR_VALUE"] > p97_5 | CREA_df_all[,"SCR_VALUE"] < p2_5)
updated_CREA_df_all <- CREA_df_all[-outlier_idxes,]
##Get anlysis ID
Analysis_Ids <- unique(updated_CREA_df_all$STUDY_PATIENT_ID)
source("/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Proposal_Code/new_Ultilities.R")
library(lubridate)
outdir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
########################################################################################
##                          1. Time info
##
########################################################################################
#Load HOSP and ICU time
time_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
time_data <- read.csv(paste0(time_data_dir,"time_info_1stHOSP_Admit.csv"), stringsAsFactors = F)
noHOSP_infoindexes <- which(is.na(time_data$HOSP_ADMIT_DATE) == T | is.na(time_data$HOSP_DISCHARGE_DATE) ==T)
time_data <- time_data[-noHOSP_infoindexes,]
########################################################################################
##                          1. demographics info
##
########################################################################################
#Get demographics
demo_data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
demo_info_df <- read.csv(paste0(demo_data_dir,"demo_info_df.csv"))
########################################################################################
##                          2. baseline Scr info
##
########################################################################################
#Get demographics
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
Baseline_Scr_df <- read.csv(paste0(data_dir,"Baseline_Scr.csv"))
########################################################################################
##                          3. outpatients Scr after HOSP info
##
########################################################################################
data_dir <- "/Users/lucasliu/Desktop/DrChen_Projects/All_AKI_Projects/Proposal_or_Abstract_Project/Proposal_Project/Intermediate_Data/AKI_JASN_NOV_20/"
AfterHOSP_Scr_df <- read.csv(paste0(data_dir,"Scr_AfterHOSP.csv"))
AfterHOSP_Scr_df$SCR_ENTERED <- ymd_hms(AfterHOSP_Scr_df$SCR_ENTERED)
####Anlaysis ID
Analysis_Ids <- unique(Baseline_Scr_df$STUDY_PATIENT_ID)
########################################################################################
#####4. Compute Baseline EGFR
##### #updated using EPI_equation Jan19_21
########################################################################################
baseline_eGFR <- NA
for (p in 1:nrow(Baseline_Scr_df)){
if (p %% 100 == 0){
print(p)
}
curr_id <- Baseline_Scr_df[p,"STUDY_PATIENT_ID"]
curr_baseline_Scr <- Baseline_Scr_df[p,"baseline_Scr"]
curr_pt_demo_data <- demo_info_df[which(demo_info_df[,"STUDY_PATIENT_ID"]==curr_id),]
if (nrow(curr_pt_demo_data) !=0){ #if demo info for this patient is avaliable
if (is.na(curr_pt_demo_data[,"GENDER"])== T){
curr_gender <- NA
}else{
if (curr_pt_demo_data[,"GENDER"] == "M"){
curr_gender <- "MALE"
}else if (curr_pt_demo_data[,"GENDER"]=="F"){
curr_gender <- "FEMALE"
}else{
curr_gender <- NA
}
}
if (is.na(curr_pt_demo_data[,"BLACK_Race"])== T){
curr_race <- NA
}else{
if (curr_pt_demo_data[,"BLACK_Race"] == 0){
curr_race <- "NON-BLACK"
}else if (curr_pt_demo_data[,"BLACK_Race"]==1){
curr_race <- "BLACK/AFR AMERI"
}
}
curr_age<- curr_pt_demo_data[,"age"]
}else {
curr_age <- NA
curr_race <- NA
curr_gender <- NA
}
if (is.na(curr_age)== T | is.na(curr_gender)== T |is.na(curr_race)== T ){
baseline_eGFR[p] <- NA
}else{
#baseline_eGFR[p] <- MDRD_equation(curr_baseline_Scr,curr_age,curr_gender,curr_race)
baseline_eGFR[p] <- EPI_equation(curr_baseline_Scr,curr_age,curr_gender,curr_race)
}
}
Baseline_Scr_andEGFR_df <- cbind.data.frame(Baseline_Scr_df,baseline_eGFR)
View(Baseline_Scr_df)
View(Baseline_Scr_andEGFR_df)
View(demo_info_df)
